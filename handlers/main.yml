---

# handlers file for postgres
# single instance
# start postgres instance
- name: postgres start
  ansible.builtin.service:
    name: "{{ postgres_service_name }}"
    state: started

# enable postgres instance
- name: postgres enable
  ansible.builtin.service:
    name: "{{ postgres_service_name }}"
    enabled: true

# restart postgres instance
- name: postgres restart
  ansible.builtin.service:
    name: "{{ postgres_service_name }}"
    state: restarted

# reload postgres config
- name: postgres reload conf
  ansible.builtin.service:
    name: "{{ postgres_service_name }}"
    state: reloaded

# stop postgres instance
- name: postgres stop
  ansible.builtin.service:
    name: "{{ postgres_service_name }}"
    state: stopped

# patroni cluster solution
# start patroni instance
- name: patroni start
  ansible.builtin.service:
    name: patroni
    state: started

# restart patroni instance
- name: patroni restart
  ansible.builtin.service:
    name: patroni
    state: restarted

# reload patroni config
- name: patroni reload conf
  ansible.builtin.service:
    name: patroni
    state: reloaded

# stop patroni instance
- name: patroni stop
  ansible.builtin.service:
    name: patroni
    state: stopped

# restart stolon-sentinel instance
- name: stolon-sentinel restart
  ansible.builtin.service:
    name: stolon-sentinel
    state: restarted

# restart stolon-keeper instance
- name: stolon-keeper restart
  ansible.builtin.service:
    name: stolon-keeper
    state: restarted

# restart stolon-proxy instance
- name: stolon-proxy restart
  ansible.builtin.service:
    name: stolon-proxy
    state: restarted

