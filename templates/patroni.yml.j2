# {{ patroni_config_file }}
# this file managed by ansible, you shouldn't edit it manually

scope: {{ patroni_scope_name }}
{% if etcd_service_name is defined %}
namespace: {{ etcd_service_name }}
{% endif %}
name: {{ common_short_hostname }}

# Logging parameters if it is defined
{% if patroni_log_params is defined %}
{% for param in patroni_log_params %}
{{ param.name }}: {{ param.value }}
{% endfor%}
{% endif %}

# Rest API settings
restapi:
  connect_address: {{ common_ip4_default }}:{{ patroni_restapi_port }}
  listen: 0.0.0.0:{{ patroni_restapi_port }}
{#
#  authentication:
#    username: {{ patroni_restapi_user }}
#    password: {{ patronit_restapi_password }}
#  certfile: {{ host_ssl_cert_file }}
#  keyfile: {{ host_ssl_key_file }}
#  keyfile_password: {{ host_ssl_key_file_password }}
#  cafile: {{host_ssl_ca_file }} 
#  ciphers
#  verify_client
#  allowlist
#  allowlist_include_members
#  http_extra_headers
#  https_extra_headers

# ctl:
#   insecure: false # Allow connections to SSL sites without certs
#   certfile: {{ host_ssl_cert_file }}
#   cacert: {{ host_ssl_ca_file }}
#}

{% include 'dcs/' + postgres_cluster_dcs + '-patroni.yml.j2' %}

#raft defined as deprecated so it has not settings

bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`
  dcs:
    ttl: {{ patroni_ttl }}
    loop_wait: {{ patroni_loop_wait }}
    retry_timeout: {{ patroni_retry_timeout }}
    maximum_lag_on_failover: {{ patroni_maximum_lag_on_failover }}
#    master_start_timeout: 300
    synchronous_mode: true
{% if patrony_standby is defined %}
    standby_cluster:
      host: {{ patroni_standby.master }}
      port: {{ patroni_standby.master_port }}
      primary_slot_name: {{ patroni_standby.slot_name }}
{% endif %}
    postgresql:
      use_pg_rewind: true
#      use_slots: true
      parameters:
{% for param in postgres_params %}
        {{ param.name }}: {{ param.value }}
{% endfor %}
  # some desired options for 'initdb'
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
  - encoding: UTF8
  - auth-host: {{ postgres_password_encoding }}
  - auth-local: peer
  - data-checksums
  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
{% for phl in postgres_pg_hba_lines %}
  - {{ phl }}
{% endfor %}

  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
# post_init: /usr/local/bin/setup_cluster.sh

{% if patroni_bootstrap_users is defined %}
  # Some additional users users which needs to be created after initializing new cluster
{% for user in patroni_bootstrap_users %}
  users:
    {{ user.name }}:
      password: {{ user.password }}
      {% if user.options is defined %}
      {% for opt in user.options %}
      options:
        - {{ opt }}
      {% endfor %}
      {% endif %}
{% endfor %}
{% endif %}

postgresql:
  connect_address: {{ common_ip4_default }}:{{ postgres_client_port }}
  listen: {{ patroni_postgres_listen }}
  data_dir: {{ postgres_data_dir }}
  bin_dir: {{ postgres_bin_dir }}
  config_dir: {{ postgres_conf_dir }}
  pgpass: {{ postgres_pgpass_file }}
  authentication:
{% for role in patroni_base_roles %}
    {{ role.job }}:
      username: {{ role.name }}
      password: {{ role.password }}
{% endfor %}
{% if postgres_params_host is defined %}
  parameters:
{% for param in postgres_params_host %}
    {{ param.name }}: {{ param.value }}
{% endfor %}
{% endif %}


#watchdog:
#  mode: automatic # Allowed values: off, automatic, required
#  device: /dev/watchdog
#  safety_margin: 5

tags:
    nofailover: false
    noloadbalance: false
    clonefrom: false
    nosync: false
