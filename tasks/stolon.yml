---
# Tasks for create stolon PostgreSQL cluster
- name: Set any common variables
  ansible.builtin.include_vars:
    file: "{{ postgres_vars_dir }}/cluster.yml"
  tags: postgres_cluster,stolon_init,stolon_config,stolon_create

- name: Set any stolon variables
  ansible.builtin.include_vars:
    file: "{{ postgres_vars_dir }}/stolon.yml"
  tags: postgres_cluster,stolon_init,stolon_config,stolon_create

- name: Install stolon packages
  ansible.builtin.include_tasks: "{{ ansible_pkg_mgr }}-stolon-install.yml"
  tags: stolon,stolon_install

- name: Set parameters for stolon daemons
  ansible.builtin.template:
    src: "{{ postgres_templates_dir }}/stolon.settings.j2"
    dest: "{{ stolon_daemons_config_file }}"
    mode: "0600"
  notify:
    - Stolon-sentinel restart
    - Stolon-keeper restart
    - Stolon-proxy restart
  tags: stolon,stolon_config

- name: Init cluster if needed
  when: ansible_fqdn == postgres_master_host and stolon_init_force is defined and stolon_init_force | bool
  block:
    - name: Check if data directory is empty
      ansible.builtin.file:
        path: "{{ stolon_data_dir }}/postgres"
        state: absent
    - name: Check if temporary directory for init exists
      ansible.builtin.file:
        path: "/tmp/stolon"
        state: directory
        mode: "0755"
      tags: stolon,stolon_config,stolon_create
    - name: Copy initial config
      ansible.builtin.template:
        src: "{{ item.file }}"
        dest: "/tmp/stolon/{{ item.file | basename | regex_replace('.j2') }}"
        mode: "{{ item.mode }}"
      loop:
        - { file: "{{ postgres_templates_dir }}/stolon-init-config.json.j2", mode: '0644' }
        - { file: "{{ postgres_templates_dir }}/stolon-init.sh.j2", mode: '0755' }
      tags: stolon,stolon_create
    - name: Init stolon cluster
      ansible.builtin.command: /tmp/stolon/stolon-init.sh
      args:
        chdir: "/tmp/stolon"
      changed_when: true
      tags: stolon,stolon_create
    - name: Delete temporary directory for init
      ansible.builtin.file:
        path: "/tmp/stolon"
        state: absent
      tags: stolon,stolon_create

- name: Check if data directory for keeper exists
  ansible.builtin.file:
    path: "{{ stolon_data_dir }}"
    state: directory
    owner: "{{ postgres_system_user }}"
    group: "{{ postgres_system_user }}"
    mode: "0700"
  tags: stolon,stolon_config

- name: Create pgpass files
  ansible.builtin.template:
    src: "{{ item.template }}"
    dest: "{{ item.file }}"
    mode: "0600"
    owner: "{{ postgres_system_user }}"
    group: "{{ postgres_system_user }}"
  loop:
    - { file: "{{ stolon_own_pgpassfile }}", template: "{{ postgres_templates_dir }}/stolon-owner-pwdfile.j2" }
    - { file: "{{ stolon_repl_pgpassfile }}", template: "{{ postgres_templates_dir }}/stolon-repluser-pwdfile.j2" }
  tags: stolon,stolon_config

- name: Start and enable sentinel daemons on all nodes
  ansible.builtin.service:
    name: stolon-sentinel
    state: started
    enabled: true
  tags: stolon,stolon_start

- name: Start and enable keeper on master node
  ansible.builtin.service:
    name: stolon-keeper
    state: started
    enabled: true
  when: ansible_fqdn == postgres_master_host
  tags: stolon,stolon_start

- name: Wait for master will be started
  ansible.builtin.wait_for:
    host: "{{ postgres_master_host }}"
    port: "{{ postgres_client_port }}"
    state: started
  tags: stolon,stolon_start

- name: Start and enable keeper on other hosts
  ansible.builtin.service:
    name: stolon-keeper
    state: started
    enabled: true
  when: ansible_fqdn != postgres_master_host
  tags: stolon,stolon_start

- name: Start and enable proxy
  ansible.builtin.service:
    name: stolon-proxy
    state: started
    enabled: true
  tags: stolon,stolon_start
