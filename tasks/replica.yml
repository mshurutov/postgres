---
# set replica mode for single host
- name: Check if postgres stopped
  tags: replica_init,replica_prepare
  ansible.builtin.service:
    name: "{{ postgres_service_name }}"
    state: stopped

- name: Delete PGDATA dir
  tags: replica_init,replica_prepare
  ansible.builtin.file:
    path: "{{ postgres_data_dir }}"
    state: absent

- name: Init postgres for distros where postgres_conf_dir != postgres_data_dir
  when: postgres_conf_dir != postgres_data_dir and replica_init_force is defined and replica_init_force | bool
  tags: replica_init,replica_prepare
  block:
    - name: Init PG
      ansible.builtin.include_tasks: "{{ ansible_pkg_mgr }}-single-init.yml"
    - name: Delete PGDATA dir
      ansible.builtin.file:
        path: "{{ postgres_data_dir }}"
        state: absent

- name: Copy backup to host
  tags: replica_init,replica_create
  block:
    - name: Create basebackup from master host
      become: true
      become_user: "{{ postgres_system_user }}"
      ansible.builtin.command: "pg_basebackup -D {{ postgres_data_dir }} -X stream -R {{ postgres_backup_connstring }}"
      changed_when: true
      when: postgres_replica_init == 'from_master'
    - name: Copy backup from backup host
      become: true
      become_user: "{{ postgres_system_user }}"
      ansible.builtin.command: "scp -r {{ postgres_backup_host }}:/{{ postgres_backup_dir }} {{ postgres_data_dir }}"
      changed_when: true
      when: postgres_replica_init == 'from_backup'

- name: Edit configs
  ansible.builtin.import_tasks: "postgres-config.yml"
  tags: replica_init,replica_config

- name: Configure replica
  become: true
  become_user: "{{ postgres_system_user }}"
  tags: replica_init,replica_start
  ansible.builtin.lineinfile:
    path: "{{ postgres_conf_dir }}/{{ postgres_recovery_conf }}"
    regexp: '^#?\s*{{ item.name }}[^#]*(\s*#?.*)$'
    line: '{{ item.name }} = {{ item.value }} \1'
    backrefs: true
    create: true
    state: present
    mode: "0600"
  loop: "{{ postgres_recovery_params }}"
  notify: Postgres start
